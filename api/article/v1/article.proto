syntax = "proto3";

package api.article.v1;

import "google/api/annotations.proto";

option go_package = "kratos-demo/api/article/v1;v1";

service Article {
	rpc CreateArticle (CreateArticleRequest) returns (SingleArticleReply) {
		option (google.api.http) = {
			post: "/api/article"
			body: "*"
		};
	}

	rpc UpdateArticle (UpdateArticleRequest) returns (SingleArticleReply) {
		option (google.api.http) = {
			put: "/api/article/{article_id}"
			body: "*"
		};
	}	

	rpc DeleteArticle (DeleteArticleRequest) returns (OperateReply) {
		option (google.api.http) = {
			delete: "/api/article/{article_id}"
		};
	}

	rpc GetArticle (GetArticleRequest) returns (SingleArticleReply) {
		option (google.api.http) = {
			get: "/api/article/{article_id}"
		};
	}

	rpc ListArticle (ListArticleRequest) returns (MultipleArticlesReply) {
		option (google.api.http) = {
			get: "/api/articles"
		};
	
	}
}

// 返回操作是否成功的时候使用
message OperateReply{
  bool success = 1;
}

// 创建文章请求
message CreateArticleRequest {
	message Article {
			string title = 1;
			string description = 2;
			string body = 3;
			repeated int32 tagList = 4;
	}

	Article article = 1;
}

// 单个文章返回
message SingleArticleReply {
	message Author {
			string username = 1;
			string bio = 2;
			string image = 3;
			bool following = 4; // 是否关注
	}

	message Article {
			int32 id = 1;
			string title = 2;
			string description = 3;
			string body = 4;
			repeated int32 tagList = 5;
			string createdAt = 6;
			string updatedAt = 7;
			Author author = 8;
	}

	Article article = 1;
}

// 更新文章请求
message UpdateArticleRequest {
	message Article {
		string title = 2;
		string description = 3;
		string body = 4;
		repeated int32 tagList = 5;
	}

	Article article = 1;
	int32 article_id = 2;
}

// 删除文章请求
message DeleteArticleRequest {
	int32 article_id = 1;
}

// 文章详情请求
message GetArticleRequest {
	int32 article_id = 1;
}

// 文章列表请求
message ListArticleRequest {
	int32 page = 1;
	int32 page_size = 2;
	int32 tag = 3;
	int32 author = 4;
}

// 文章列表返回
message MultipleArticlesReply {
	message Author {
			string username = 1;
			string bio = 2;
			string image = 3;
			bool following = 4;
	}

	message Articles {
		int32 id = 1;
		string title = 2;
		string description = 3;
		string body = 4;
		repeated int32 tagList = 5;
		string createdAt = 6;
		string updatedAt = 7;
		Author author = 8;
	}

	repeated Articles articles = 1;
	uint32 count = 2; // 文章列表总数量
}