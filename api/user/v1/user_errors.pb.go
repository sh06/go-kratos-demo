// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 用户不存在
func IsErrorUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_USER_NOT_FOUND.String() && e.Code == 450
}

// 用户不存在
func ErrorErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(450, ErrorReason_ERROR_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 登录用户密码错误
func IsErrorUserPasswordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_USER_PASSWORD_ERROR.String() && e.Code == 450
}

// 登录用户密码错误
func ErrorErrorUserPasswordError(format string, args ...interface{}) *errors.Error {
	return errors.New(450, ErrorReason_ERROR_USER_PASSWORD_ERROR.String(), fmt.Sprintf(format, args...))
}

// 用户邮箱已注册
func IsErrorUserEmailExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_USER_EMAIL_EXIST.String() && e.Code == 450
}

// 用户邮箱已注册
func ErrorErrorUserEmailExist(format string, args ...interface{}) *errors.Error {
	return errors.New(450, ErrorReason_ERROR_USER_EMAIL_EXIST.String(), fmt.Sprintf(format, args...))
}

// 用户名已注册
func IsErrorUserUsernameExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_USER_USERNAME_EXIST.String() && e.Code == 450
}

// 用户名已注册
func ErrorErrorUserUsernameExist(format string, args ...interface{}) *errors.Error {
	return errors.New(450, ErrorReason_ERROR_USER_USERNAME_EXIST.String(), fmt.Sprintf(format, args...))
}
